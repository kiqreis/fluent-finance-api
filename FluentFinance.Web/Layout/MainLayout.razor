@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider"
				  @bind-IsDarkMode="_isDarkMode"
				  Theme="Configuration.Theme" />

<MudSnackbarProvider />
<MudDialogProvider />

<AuthorizeView>
	<Authorized>
		<MudLayout>
			<MudAppBar>
				<MudIconButton Icon="@Icons.Material.Rounded.Menu"
							   Color="Color.Inherit"
							   Edge="Edge.Start"
							   OnClick="ToggleDrawer" />
				Fluent Finance
				<MudSpacer />
				<MudText>
					@context.User.Identity?.Name
				</MudText>
				<MudSwitch Color="Color.Dark"
						   ThumbIcon="@Icons.Material.Outlined.LightbulbCircle"
						   @bind-Value="@_isDarkMode"
						   T="bool"
						   Class="ma-4" />
			</MudAppBar>
			<MudDrawer @bind-Open="@_isDrawerOpened"
					   ClipMode="DrawerClipMode.Docked">
				<NavMenu />
			</MudDrawer>
			<MudMainContent>
				<MudContainer>
					@Body
				</MudContainer>
			</MudMainContent>
		</MudLayout>
	</Authorized>
	<NotAuthorized>
		<LoginRedirect />
	</NotAuthorized>
</AuthorizeView>


@code {

	private bool _isDarkMode = true;
	private bool _isDrawerOpened = true;

	private MudThemeProvider _mudThemeProvider = null!;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_isDarkMode = await _mudThemeProvider.GetSystemPreference();
			await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);

			StateHasChanged();
		}
	}

	private Task OnSystemPreferenceChanged(bool newValue)
	{
		_isDarkMode = newValue;
		StateHasChanged();

		return Task.CompletedTask;
	}

	private void ToggleDrawer() => _isDrawerOpened = !_isDrawerOpened;
}